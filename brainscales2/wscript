#!/usr/bin/env python

import os
from os.path import join
from waflib.extras.test_base import summary
from waflib.extras.symwaf2ic import get_toplevel_path
from waflib import Utils


def depends(ctx):
    ctx('haldls')
    ctx('grenade', 'pygrenade')
    ctx('calix')
    ctx('code-format')
    ctx('logger')


def options(opt):
    opt.load('pytest')
    opt.load('pylint')
    opt.load('pycodestyle')
    opt.load('doxygen')


def configure(cfg):
    cfg.load('python')
    cfg.check_python_version()
    cfg.load('pytest')
    cfg.load('pylint')
    cfg.load('pycodestyle')
    cfg.load('doxygen')


def build(bld):
    bld.env.DLSvx_HARDWARE_AVAILABLE = "cube" == os.environ.get("SLURM_JOB_PARTITION")
    bld(name = 'pynn_brainscales2',
        features = 'use py pylint pycodestyle',
        source = bld.path.ant_glob('pynn_brainscales/**/*.py',
                                   excl='pynn_brainscales/brainscales2/examples/*.py'),
        relative_trick = True,
        use = ['dlens_vx_v3', 'pylogging', 'pygrenade_vx', 'calix_pylib'],
        pylint_config = join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config = join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout = 60,
    )

    bld(name = 'pynn_brainscales2_examples',
        features = 'use py pylint pycodestyle',
        source = bld.path.ant_glob('pynn_brainscales/brainscales2/examples/*.py'),
        relative_trick = True,
        use = ['pynn_brainscales2'],
        pylint_config = join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config = join(get_toplevel_path(), "code-format", "pycodestyle"),
    )

    bld(name = 'pynn_brainscales2_swtest',
        tests = bld.path.ant_glob('test/sw/*.py'),
        features = 'use pytest pylint pycodestyle',
        use = ['pynn_brainscales2'],
        install_path = '${PREFIX}/bin',
        chmod=Utils.O755,
        pylint_config = join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config = join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout = 240,
    )

    bld(name = 'pynn_brainscales2_hwtest',
        tests = bld.path.ant_glob('test/hw/*.py'),
        test_timeout = 1400,
        features = 'use pytest',
        use = ['pynn_brainscales2'],
        install_path = '${PREFIX}/bin',
        chmod=Utils.O755,
        skip_run = not bld.env.DLSvx_HARDWARE_AVAILABLE
    )

    bld(name = 'pynn_brainscales2_hwtest_pylint',
        tests = bld.path.ant_glob('test/hw/*.py'),
        features = 'use pylint pycodestyle',
        use = ['pynn_brainscales2'],
        pylint_config = join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config = join(get_toplevel_path(), "code-format", "pycodestyle"),
    )

    if bld.env.DOXYGEN:
        bld(
            target = 'doxygen_pynn-brainscales2',
            features = 'doxygen',
            doxyfile = bld.root.make_node(os.path.join(get_toplevel_path(), "code-format", "doxyfile")),
            doxy_inputs = 'pynn_brainscales',
            install_path = 'doc/pynn-brainscales2',
            pars = {
                "PROJECT_NAME": "\"PyNN.brainscales2\"",
                "OUTPUT_DIRECTORY": os.path.join(get_toplevel_path(), "build", "pynn-brainscales2", "doc"),
                "PYTHON_DOCSTRING": "NO",
            },
        )

    bld.add_post_fun(summary)
